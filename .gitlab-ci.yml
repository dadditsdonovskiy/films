workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID 
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release-.*$/

variables:
  MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  MYSQL_ROOT_HOST: "%"
  MYSQL_DATABASE: ${DB_DATABASE}
  MYSQL_USER: ${DB_USERNAME}
  MYSQL_PASSWORD: ${DB_PASSWORD}
  DB_USERNAME: ${DB_USERNAME}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_DATABASE}
  DB_PORT: ${DB_PORT}
  DB_HOST: ${DB_HOST}

before_script:
  - rm -fr /var/www/html

stages:
  - build
  - tests
  - sonarqube
  - dev
  - test
  - live

build_vendor:
  stage: build
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  artifacts:
    untracked: true
    paths:
      - vendor/
      - node_modules/
    when: on_success
    expire_in: 2 days
  cache:
    key: vendors-lib
    paths:
      - vendor/
      - node_modules/
  script:
    - echo "===== Install dependencies ====="
    - chmod +x ./composer-install.sh && ./composer-install.sh
    - npm i
  when: always
  tags:
    - shared-cli

phpmd:
  stage: tests
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  script:
    - echo "===== Run tests ====="
    - vendor/bin/dep tests:php_md
  when: always
  dependencies:
    - build_vendor
  tags:
    - shared-tests
  only:
    - merge_requests    

phpcpd:
  stage: tests
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  script:
    - echo "===== Run tests ====="
    - vendor/bin/dep tests:php_cpd
  when: always
  dependencies:
    - build_vendor
  tags:
    - shared-tests
  only:
    - merge_requests    

phpcs:
  stage: tests
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  script:
    - echo "===== Run tests ====="
    - vendor/bin/dep tests:php_cs
  when: always
  dependencies:
    - build_vendor
  tags:
    - shared-tests
  only:
    - merge_requests    

test:
  stage: tests
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  before_script:
    - cp .env.example .env
    - php artisan key:generate
  variables:
    XDEBUG_MODE: "coverage"
  script:
    - echo "===== Run tests ====="
    - php artisan test    
    - if [[ $CI_COMMIT_BRANCH == $SONAR_BRANCH ]]; then vendor/bin/phpunit \        
        --coverage-text \
        --coverage-clover build/coverage.xml \
        --colors=never \
        tests; fi
  artifacts:
    paths:
      - build
    expire_in: 30 min
  when: always
  dependencies:
    - build_vendor
  tags:
    - shared-tests

sonarqube:
  stage: sonarqube
  when: on_success
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
      - .scannerwork
  script:    
    - sonar-scanner 
        -Dsonar.projectKey=${SONAR_KEY} 
        -Dsonar.host.url=${SONAR_HOST_URL} 
        -Dsonar.login=${SONAR_TOKEN} 
        -Dsonar.projectVersion=${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA} 
        -Dsonar.php.coverage.reportPaths=build/coverage.xml
  rules:
    # SonarQube CommunityEdition only supports analyzing a single branch.
    # So only run on one branch (master or develop).
    - if: $CI_COMMIT_BRANCH == $SONAR_BRANCH
      when: on_success
    - when: never
  allow_failure: true
  dependencies:
    - test
  tags:
    - shared-tests

dev:review:
  stage: dev
  when: manual
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  before_script:
    - echo 'APP_KEY=' > .env
    - php artisan key:generate
  services:
    - name: mysql:8.0
      alias: mysql
      command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
  variables:
    PROXY_build_DOMAIN: dev-${MAIN_DOMAIN}
    BUILD_URL: https://dev-${MAIN_DOMAIN}
    APP_URL: https://dev-${MAIN_DOMAIN}
    APP_DEBUG: 'true'
    TELESCOPE_ENABLED: 'true'
    APP_ENV: develop
    PROJECT_DOMAIN: https://dev-${MAIN_DOMAIN}

  script:
    - echo "===== All services ====="
    - cat /etc/hosts | grep '10.1.' | awk '{print $1" "$2;}'
    - echo "===== Run SSH ====="
    - HOSTIP=`ip addr | grep "global eth0" | awk '{print $2;}' | cut -f 1 -d "/"`
    - echo "ssh ${GITLAB_USER_LOGIN}@${HOSTIP}"
    - echo "SSH Password ${CI_COMMIT_SHA}"
    - sed -ri "s/^sshlogin/${GITLAB_USER_LOGIN}/" /etc/passwd
    - echo "${GITLAB_USER_LOGIN}:${CI_COMMIT_SHA}" | chpasswd
    - mkdir /var/run/sshd && /usr/sbin/sshd -f /etc/ssh/sshd_config
    - ./vendor/bin/dep gitlab:deploy
    - php artisan optimize
    - php artisan view:cache
    - apache2-foreground
  except:
    - merge_requests
  environment:
    name: dev-review/$CI_PROJECT_PATH_SLUG
    url: $BUILD_URL
  dependencies:
    - build_vendor
  tags:
    - shared-web

dev:swagger:
  stage: dev
  when: manual
  image:
    name: hub.ci.gbksoft.net:5000/pub/swagger:3
  variables:
    PROXY_build_HTTPS: "443:8080"
    PROXY_build_DOMAIN: dev-swagger-ui-${MAIN_DOMAIN}
    BUILD_URL: https://dev-swagger-ui-${MAIN_DOMAIN}
    API_URL: "https://dev-$MAIN_DOMAIN/rest/v1/swagger/json"
  script:
    - echo "===== Run Swagger UI ====="
    - echo "Swagger UI URL ${BUILD_URL}"
    - echo "JSON URL ${API_URL}"
    - sh /usr/share/nginx/docker-run.sh
  except:
    - merge_requests
  environment:
    name: dev-swagger-ui/$CI_PROJECT_PATH_SLUG
    url: $BUILD_URL
  tags:
  - shared-web

test:review:
  stage: test
  when: manual
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  before_script:
    - echo 'APP_KEY=' > .env
    - php artisan key:generate
  services:
    - name: mysql:8.0
      alias: mysql
      command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
  variables:
    PROXY_build_DOMAIN: test-${MAIN_DOMAIN}
    BUILD_URL: https://test-$MAIN_DOMAIN
    APP_URL: https://test-${MAIN_DOMAIN}
    APP_DEBUG: 'true'
    TELESCOPE_ENABLED: 'true'
    APP_ENV: test
    PROJECT_DOMAIN: https://test-${MAIN_DOMAIN}
  script:
    - echo "===== All services ====="
    - cat /etc/hosts | grep '10.1.' | awk '{print $1" "$2;}'
    - echo "===== Run SSH ====="
    - HOSTIP=`ip addr | grep "global eth0" | awk '{print $2;}' | cut -f 1 -d "/"`
    - echo "ssh ${GITLAB_USER_LOGIN}@${HOSTIP}"
    - echo "SSH Password ${CI_COMMIT_SHA}"
    - sed -ri "s/^sshlogin/${GITLAB_USER_LOGIN}/" /etc/passwd
    - echo "${GITLAB_USER_LOGIN}:${CI_COMMIT_SHA}" | chpasswd
    - mkdir /var/run/sshd && /usr/sbin/sshd -f /etc/ssh/sshd_config
    - ./vendor/bin/dep gitlab:deploy
    - php artisan optimize
    - php artisan view:cache
    - apache2-foreground
  except:
    - merge_requests
  environment:
    name: test-review/$CI_PROJECT_PATH_SLUG
    url: $BUILD_URL
  dependencies:
    - build_vendor
  tags:
    - shared-web

test:swagger:
  stage: test
  when: manual
  image:
    name: hub.ci.gbksoft.net:5000/pub/swagger:3
  variables:
    PROXY_build_HTTPS: "443:8080"
    PROXY_build_DOMAIN: test-swagger-ui-${MAIN_DOMAIN}
    BUILD_URL: https://test-swagger-ui-${MAIN_DOMAIN}
    API_URL: "https://test-$MAIN_DOMAIN/rest/v1/swagger/json"
  script:
  - echo "===== Run Swagger UI ====="
  - echo "Swagger UI URL ${BUILD_URL}"
  - echo "JSON URL ${API_URL}"
  - sh /usr/share/nginx/docker-run.sh
  except:
    - merge_requests
  environment:
    name: test-swagger-ui/$CI_PROJECT_PATH_SLUG
    url: $BUILD_URL
  tags:
  - shared-web

live:review:
  stage: live
  when: manual
  image:
    name: hub.ci.gbksoft.net:5000/pub/php-apache:8.0
    entrypoint: [""]
  before_script:
    - echo 'APP_KEY=' > .env
    - php artisan key:generate
  services:
    - name: mysql:8.0
      alias: mysql
      command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
  variables:
    PROXY_build_DOMAIN: live-${MAIN_DOMAIN}
    BUILD_URL: https://live-$MAIN_DOMAIN
    APP_URL: https://dev-${MAIN_DOMAIN}
    APP_DEBUG: 'false'
    TELESCOPE_ENABLED: 'false'
    APP_ENV: production
    PROJECT_DOMAIN: https://live-${MAIN_DOMAIN}
  script:
    - echo "===== All services ====="
    - cat /etc/hosts | grep '10.1.' | awk '{print $1" "$2;}'
    - composer install --no-interaction --optimize-autoloader --no-progress --no-dev
    - ./vendor/bin/dep gitlab:deploy
    - php artisan optimize
    - php artisan view:cache
    - apache2-foreground
  only:
    - tags
    - /^release-.*$/
  environment:
    name: live-review/$CI_PROJECT_PATH_SLUG
    url: $BUILD_URL
  tags:
    - shared-web
